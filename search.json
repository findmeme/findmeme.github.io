[{"title":"宽恕-王菲","path":"/2023/01/19/宽恕-王菲/","content":"《宽恕》词的一些探讨\n\n<!-- more -->\n\n## 前言\n\n王菲唱的《宽恕》这首歌，第一次了解这首歌是21年暑假看天龙八部了解的，记得是片尾曲，剧情与歌曲互相成全，类似的歌曲还有《归去来》。每次听到这首歌，没有深究歌词，说白了不太看得懂。看到“难道爱比恨更难宽恕”想到萧峰失去了阿朱，意难平，惋惜，这也是我对这首歌的理解。今天早上想起这首歌，不明白为什么这首歌叫《宽恕》，上知乎搜之后恍然大悟。\n\n<img src=\"https://qingfang-2022.oss-cn-hangzhou.aliyuncs.com/blog/202301191426589.png\" alt=\"image-20230119135200960\" style=\"zoom:33%;\" />\n\n<img src=\"https://qingfang-2022.oss-cn-hangzhou.aliyuncs.com/blog/202301191426590.png\" alt=\"image-20230119135033391\" style=\"zoom:33%;\" />\n\n原来这首歌不是单方对话，而是萧朱二人间的对话。\n\n## 阿朱\n\n==我是你执迷的信徒，你是我的坟墓==。阿朱对萧峰是爱的，这种爱包含了崇拜，萧峰大义凌然，是标准的武侠英雄，这样一个人，不崇拜是不可能的，况且萧峰冒着生命危险救了阿朱。“你的仇人是我父亲（阿朱以为），两难境地，我是你执迷的信徒，我完全支持你报仇，即便那个人是我父亲，可他终究是我父亲，两难境地，那就让我替父亲**赎罪**吧”\n\n## 萧峰\n\n阿朱的死是萧峰一生的痛，为了阿朱，萧峰照顾了阿紫一辈子。萧峰是契丹人，可生在中原，他爱中原，可中原不容纳他。令人佩服的一点是，。萧峰不负契丹也不负中原，跳下山崖，坦然面对死亡。他放下了国恨家仇，放下了江湖恩怨是非，也就是宽恕了这些误解自己的人，这些造成自己悲惨一生的人。可是，他始终无法放下阿朱，那个在自己复仇途中不幸牺牲的女子。==“可你欠我幸福，拿什么来弥补”==“我宽恕了所有人，那些带给我痛苦一生的人，可我放不下你，我们本应幸福，你却离我而去，你欠我幸福，拿什么来弥补”\n\n## 宽恕\n\n==爱比恨更难宽恕==。宽恕换成放下一词更好理解。“放下了所有恨，可始终放不下心中的那份爱，放不下那个因我而死的人”","tags":["天龙八部","情"],"categories":["随想"]},{"title":"物理光学","path":"/2022/12/09/物理光学/","content":"从麦克斯韦方程组出发推导出光学中基本原理，如电磁波的形式……\n\n<!-- more -->\n\n## 麦克斯韦方程组\n\n原始方程组\n$$\n\\text{场方程}\\left\\{ \\begin{array}{l}\n\t\\nabla \\cdot \\vec{D}=\\rho\\\\\n\t\\nabla \\times \\vec{E}=-\\frac{\\partial \\vec{B}}{\\partial t}\\\\\n\t\\nabla \\cdot \\vec{B}=0\\\\\n\t\\nabla \\times \\vec{H}=\\vec{j}+\\frac{\\partial \\vec{D}}{\\partial t}\\\\\n\\end{array} \\right. +\\text{物质方程}\\begin{cases}\n\t\\vec{D}=\\varepsilon \\vec{E}\\\\\n\t\\vec{B}=\\mu \\vec{H}\\\\\n\t\\vec{j}=\\sigma \\vec{E}\\\\\n\\end{cases}\n$$\n积分可得边界条件\n$$\n\\left\\{ \\begin{array}{l}\n\t{D}_{1\\mathrm{n}}={D}_{2\\mathrm{n}}\\\\\n\t{E}_{1\\tau}={E}_{2\\tau}\\\\\n\t{B}_{1\\mathrm{n}}={B}_{2\\mathrm{n}}\\\\\n\t{H}_{1\\tau}={H}_{2\\tau}\\\\\n\\end{array} \\right.\n$$\n\n## 波动方程的导出\n\n**无源情况**\n$$\n\\left\\{ \\begin{array}{l}\n\t\\nabla \\cdot \\vec{D}=0\\\\\n\t\\nabla \\times \\vec{E}=-\\frac{\\partial \\vec{B}}{\\partial t}\\\\\n\t\\nabla \\cdot \\vec{B}=0\\\\\n\t\\nabla \\times \\vec{H}=\\frac{\\partial \\vec{D}}{\\partial t}\\\\\n\\end{array} \\right.\n$$\n写成E和H的对称形式\n$$\n\n$$\n于是\n$$\n\\nabla \\times(\\nabla \\times \\vec{E})=\\frac{-\\mu \\partial \\nabla \\times \\vec{H}}{\\partial t}\n$$\n利用三叉乘公式得\n$$\n\\nabla \\cdot (\\nabla \\cdot \\vec{E})-\\nabla ^2\\vec{E}=\\frac{-\\mu \\partial}{\\partial t}\\left( \\varepsilon \\frac{\\partial \\vec{E}}{\\partial t} \\right) =-\\varepsilon \\mu \\frac{\\partial ^2\\vec{E}}{\\partial t}\n$$\n左边第一项为0，所以\n$$\n-\\nabla ^2\\vec{E}=-\\varepsilon \\mu \\frac{\\partial ^2\\vec{E}}{\\partial t}\n$$\n同理\n$$\n-\\nabla ^2\\vec{H}=\\varepsilon \\frac{\\partial ^2\\nabla \\times \\vec{E}}{\\partial t^2}=\\varepsilon \\frac{\\partial}{\\partial t}\\left( \\frac{-\\partial \\vec{B}}{\\partial t} \\right) =-\\varepsilon \\mu \\frac{\\partial ^2\\vec{H}}{\\partial t^2}\n$$\n整理可得\n$$\n\\left\\{\\begin{array}{l}\n\\nabla^{2} \\vec{E}-\\varepsilon \\mu \\frac{\\partial \\vec{E}}{\\partial t}=0 \\\\\n\\nabla^{2} \\vec{H}-\\varepsilon \\mu \\frac{\\partial^{2} \\vec{H}}{\\partial t}=0\n\\end{array}\\right.\n$$\n令$v=\\frac{1}{\\sqrt{\\varepsilon \\mu}}$，可得\n$$\n\\left\\{ \\begin{array}{l}\n\t\\nabla ^2\\vec{E}-V^2\\frac{\\partial ^2\\vec{E}}{\\partial t^2}=0\\\\\n\t\\nabla ^2\\vec{H}-V^2\\frac{\\partial ^2\\vec{H}}{\\partial t^2}=0\\\\\n\\end{array} \\right.\n$$\n为标准的**波动方程**，特别的，真空情况下$c=\\frac{1}{\\sqrt{\\varepsilon _0\\mu _0}}$\n\n## 无源传播的单色平面波\n\n该波动方程有解，形式如下\n$$\n\\left\\{ \\begin{array}{l}\n\t\\vec{E}=\\vec{E}_0e^{i(\\vec{k}\\cdot \\vec{r}-\\omega t)}\\\\\n\t\\vec{H}=\\vec{H}_0e^{i\\left( \\vec{k}^{'}\\cdot \\vec{r}-\\omega ^{'}t \\right)}\\\\\n\\end{array} \\right.\n$$\n或者实数解形式如下\n$$\n\\left\\{ \\begin{array}{l}\n\t\\vec{E}=\\vec{E}_0\\cos\\mathrm{(}\\vec{k}\\cdot \\vec{r}-\\omega t)\\\\\n\t\\vec{H}=\\vec{H}_0\\cos \\left( \\vec{k}^{'}\\cdot \\vec{r}-\\omega ^{'}t \\right)\\\\\n\\end{array} \\right.\n$$\n其中$k,w$的类比关系如下\n$$\n\\begin{array}{l}\n\t\\omega ,T,\\nu \\Rightarrow 2\\pi \\nu =2\\pi \\frac{1}{T}=\\omega\\\\\n\tk,\\lambda ,f\\Rightarrow 2\\pi f=2\\pi \\frac{1}{\\lambda}=k\\\\\n\\end{array}\n$$\n为得到$k，w$的关系，我们将解代回波动方程\n$$\n\\nabla ^2\\vec{E}-\\frac{1}{v^2}\\frac{\\partial ^2}{\\partial t^2}\\vec{E}=0\\Rightarrow (i\\vec{k})^2\\vec{E}-\\frac{1}{v^2}(-i\\omega )^2\\vec{E}=0\n$$\n\n$$\n-k^2+\\frac{1}{v^2}w^2=0\\Rightarrow w=kv\n$$\n\n最终得到一个关系，这个关系称为**色散关系**\n$$\nw=kv\n$$\n==注==\n$$\n\\begin{aligned}\n\t\\nabla \\cdot \\vec{E}&=\\nabla \\cdot \\vec{E}_0e^{i(\\vec{k}\\cdot \\vec{r}-wt)}=\\nabla _iE_{0i}e^{i\\left( k_mr_m-wt \\right)}\\\\\n\t&=E_{0i}\\frac{\\partial}{\\partial r_i}e^{j\\left( k_mr_m-wt \\right)}=E_{0i}e^{-jwt}\\frac{\\partial}{\\partial r_i}e^{jk_mr_m}\\\\\n\t&=E_{0i}e^{-jwt}e^{jk_mr_m}jk_m\\cdot \\delta m_i\\\\\n\t&=E_{0i}jk_ie^{-jwt}\\cdot e^{jk_mr_m}\\\\\n\t&=j\\vec{k}\\cdot \\vec{E}\\\\\n\t\\therefore \\nabla \\cdot \\vec{O}&=i\\vec{k}\\cdot \\vec{O}\\\\\n\\end{aligned}\n$$\n\n$$\n\\begin{aligned}\n\t(\\nabla \\times \\vec{E})_m&=\\varepsilon _{mnl}\\nabla _nE_l=\\varepsilon _{mnl}\\cdot \\frac{\\partial}{\\partial r_n}\\cdot E_{0l}e^{\\left. i(k_jr_j-\\omega t \\right)}\\\\\n\t&=\\varepsilon _{mnl}\\cdot E_{0l}\\cdot e^{-i\\omega t}\\frac{\\partial}{\\partial r_n}e^{i\\left( k_jr_j \\right)}\\\\\n\t&=\\varepsilon _{mnl}\\cdot E_{0l}\\cdot e^{-i\\omega t}\\cdot e^{i\\left( k_jr_j \\right)}\\cdot ik_j\\cdot \\delta _{nj}\\\\\n\t&=\\varepsilon _{mnl}\\cdot E_{0l}e^{i(\\vec{k}\\cdot \\vec{r}-\\omega t)}\\cdot ik_n\\\\\n\t&=i\\vec{k}\\times \\vec{E}\\\\\n\t\\therefore \\nabla \\times \\vec{O}&=i\\vec{k}\\times \\overrightarrow{O}\\\\\n\\end{aligned}\n$$\n\n## E和H的关系（平面波）\n\n将波动方程的解**代回**无源麦克斯韦方程组，\n$$\n\\left\\{ \\begin{array}{l}\n\t\\nabla \\cdot \\vec{E}=0\\\\\n\t\\nabla \\times \\vec{E}=-\\mu \\frac{\\partial \\vec{H}}{\\partial t}\\\\\n\t\\nabla \\cdot \\vec{H}=0\\\\\n\t\\nabla \\times \\vec{H}=\\varepsilon \\frac{\\partial \\vec{E}}{\\partial t}\\\\\n\\end{array} \\right.\n$$\n利用两个替代关系\n$$\n\\begin{cases}\n\t\\nabla =i\\vec{k}\\\\\n\t\\frac{\\partial}{\\partial t}=-iw\\\\\n\\end{cases}\n$$\n得到\n$$\n\\left\\{ \\begin{array}{l}\n\t\\vec{k}\\cdot \\vec{E}=0\\\\\n\t\\vec{k}\\cdot \\vec{H}=0\\\\\n\t\\vec{k}\\times \\vec{E}=\\mu w\\vec{H}\\\\\n\t\\vec{k}\\times \\vec{H}=-\\varepsilon w\\vec{E}\\\\\n\\end{array} \\right.\n$$\n由前两式可知$\\vec{k},\\vec{E},\\vec{H}$成右手螺旋关系，于是有\n$$\n\\begin{array}{l}\n\t\\therefore k\\cdot |\\vec{E}|=\\mu w|\\vec{H}|\\\\\n\t\\therefore |\\vec{E}|\\cdot \\frac{k}{\\mu w}=|\\vec{H}|\\\\\n\tw=kv=k\\frac{1}{\\sqrt{\\varepsilon \\mu}}\\Rightarrow \\frac{k}{w}=\\sqrt{\\varepsilon \\mu}\\\\\n\t\\therefore |\\vec{E}|\\cdot \\frac{\\sqrt{\\varepsilon}}{\\sqrt{\\mu}}=|\\vec{H}|\\Rightarrow \\sqrt{\\varepsilon}|\\vec{E}|=\\sqrt{\\mu}|\\vec{H}|\\\\\n\\end{array}\n$$\n\n## 球面波和柱面波\n\n球面波（点光源）\n$$\n\\vec{E}=\\frac{\\vec{A}}{r}e^{i(\\vec{k}\\cdot \\vec{r}-\\omega t)}\n$$\n可以这么记：能量守恒$I\\propto \\vec{E}^2$，于是\n$$\n\\left(\\frac{\\vec{A}}{r}\\right)^{2} \\cdot 4 \\pi r^{2}=\\operatorname{const}\n$$\n柱面波（线光源）\n$$\n\\vec{E}=\\frac{\\vec{A}}{\\sqrt{r}}e^{i(\\vec{k}\\cdot \\vec{r}-\\omega t)}\n$$\n\n$$\n\\left( \\frac{\\vec{A}}{\\sqrt{r}} \\right) ^2\\cdot 2\\pi r\\cdot h=\\mathrm{const}\n$$\n\n## 折射反射定律\n\n由边界条件\n$$\n\\left\\{ \\begin{array}{l}\n\t{E}_{1t}={E}_{2t}\\\\\n\t{H}_{1t}={H}_{2t}\\\\\n\\end{array} \\right.\n$$\n得\n$$\n\\left\\{ \\begin{array}{l}\n\tE_{i\\bot}+E_{r\\bot}=E_{t\\bot}\\\\\n\tH_{i//}\\cos \\theta _i-H_{r//}\\mathrm{c}\\sin \\theta _r=H_{t//}\\cos \\theta _t\\\\\n\\end{array} \\right.\n$$\n由第一个式子得到\n$$\nE_{i\\bot}e^{i\\left( \\overrightarrow{k_i}\\cdot \\vec{r}-w_it \\right)}+E_{r\\bot}e^{i\\left( \\begin{array}{c}\n\t\\vec{k}_r\\cdot \\vec{r}-w_rt\\\\\n\\end{array} \\right)}=E_{t\\bot}e^{i\\left( \\begin{array}{c}\n\t\\vec{k}_t\\cdot \\vec{r}-w_rt\\\\\n\\end{array} \\right)}\n$$\n这就要求\n$$\n\\overrightarrow{k_i}\\cdot \\vec{r}-w_it=\\vec{k}_r\\cdot \\vec{r}-w_rt=\\vec{k}_t\\cdot \\vec{r}-w_tt\n$$\n由于$r，t$任意，所以\n$$\n\\begin{cases}\n\t\\overrightarrow{k_i}\\cdot \\vec{r}=\\overrightarrow{k_r}\\cdot \\vec{r}=\\overrightarrow{k_t}\\cdot \\vec{r}\\\\\n\tw_i=w_r=w_t\\\\\n\\end{cases}\n$$\n也即\n$$\n\\begin{cases}\n\tk_i\\sin \\theta _ix=k_r\\sin \\theta _rx=k_t\\sin \\theta _tx\\\\\n\tw_i=w_r=w_t\\\\\n\\end{cases}\n$$\n结合色散关系\n$$\nw=kv\n$$\n得到\n$$\n\\left\\{ \\begin{array}{l}\n\t\\frac{w_i}{v_i}\\sin \\theta _i=\\frac{w_r}{v_r}\\sin \\theta _r\\\\\n\t\\frac{w_i}{v_i}\\sin \\theta _i=\\frac{w_t}{v_t}\\sin \\theta _t\\\\\n\\end{array} \\right.\n$$\n又\n$$\nn=\\frac{c}{v}\\Rightarrow \\frac{1}{v}\\propto n\n$$\n最终得到反射与折射定律\n$$\n\\left\\{ \\begin{array}{l}\n\tn_i\\sin \\theta _i=n_r\\sin \\theta _r\\\\\n\tn_i\\sin \\theta _i=n_t\\sin \\theta _t\\\\\n\\end{array}\\Rightarrow \\begin{array}{l}\n\t\\theta _i=\\theta _r\\\\\n\tn_i\\sin \\theta _i=n_t\\sin \\theta _t\\\\\n\\end{array} \\right.\n$$","tags":["物理","光学","麦克斯韦方程组","物理光学"],"categories":["应用物理学","物理光学"]},{"title":"力扣二叉树刷题笔记","path":"/2022/12/04/力扣二叉树刷题笔记/","content":"一份精简的力扣刷题笔记，主要用来记录自己的错误\n\n<!-- more -->\n\n### 450.删除二叉搜索树中的节点\n\n[力扣题目链接](https://leetcode.cn/problems/delete-node-in-a-bst/)\n\n给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。\n\n一般来说，删除节点可分为两个步骤：\n\n首先找到需要删除的节点； 如果找到了，删除它。 说明： 要求算法时间复杂度为 $O(h)$，h 为树的高度。\n\n示例:\n\n![450.删除二叉搜索树中的节点](https://img-blog.csdnimg.cn/20201020171048265.png)\n\n**错误代码**\n\n```C++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    inline bool isLeaf(TreeNode* root){\n        return root->left==nullptr && root->right==nullptr;\n    }\n    TreeNode* traversal(TreeNode* root,int key){//返回删除树key后的树根\n        if(root==nullptr)return root;\n        if(root->val<key){\n            root->right=traversal(root->right,key);\n        }else if(root->val>key){\n            root->left=traversal(root->left,key);\n        }else{//重点在这，当root的值和key相等后的操作，错误思路如下\n            //直接将右子树提上来，然后将右子树的根节点删去\n            if(isLeaf(root)){\n                delete root;\n                return nullptr;\n            }\n            if(root->right){\n                root->val=root->right->val;\n                root->right=traversal(root->right,root->val);\n            }else{\n                root->val=root->left->val;\n                root->left=traversal(root->left,root->val);\n            }\n        }\n        return root;\n    }\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        return traversal(root,key);\n    }\n};\n```\n\n会出现如下图的错误\n\n![错误思路](https://qingfang-2022.oss-cn-hangzhou.aliyuncs.com/blog/202212041351707.png)\n\n**正确思路**\n\n![450.删除二叉搜索树中的节点](https://tva1.sinaimg.cn/large/008eGmZEly1gnbj3k596mg30dq0aigyz.gif)\n\n（图片源自代码随想录）","tags":["算法","计算机","技术","C++","二叉树"],"categories":["计算机","数据结构与算法"]},{"title":"力扣回溯刷题笔记","path":"/2022/12/04/力扣回溯刷题笔记/","content":"一份精简的力扣刷题笔记，主要用来记录自己的错误\n\n<!-- more -->\n\n## 77.组合\n\n[力扣题目链接](https://leetcode.cn/problems/combinations/)\n\n给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。\n\n示例:\n\n输入: n = 4, k = 2\n\n输出:\n[\n[2,4],\n[3,4],\n[2,3],\n[1,2],\n[1,3],\n[1,4],\n]\n\n**错误代码**\n\n```c++\nclass Solution {\npublic:\n    vector<int> path;\n    vector<vector<int>> ans;\n    void backtracing(int n,int k,int start){\n        if(path.size()==k){\n            ans.emplace_back(path);\n            path.clear();\n\n            return;\n        }\n        for(int i=start;i<=n;i++){\n            path.emplace_back(i);\n            backtracing(n,k,i+1);\n            path.pop_back();\n        }\n    }\n    vector<vector<int>> combine(int n, int k) {\n        backtracing(n,k,1);\n        return ans;\n    }\n};\n```\n\n报错：\n\nERROR: AddressSanitizer: ==heap-buffer-overflow== on address 0x60200000002c at pc 0x00000034d21b bp 0x7fff7a5021b0 sp \n\n**错误原因**\n\n地址非法操作，根本原因是==path.clrear()==，回溯自带会清空path，不需要自己手动清空。把clear去掉代码就正确了。\n\n```\nvoid backtracing(int n,int k,int start){\n    if(path.size()==k){\n        ans.emplace_back(path);\n        path.clear();\n\n        return;\n    }\n```\n\n##  90.子集II、491.递增子序列\n\n[90力扣题目链接](https://leetcode.cn/problems/subsets-ii/)\n\n给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。\n\n说明：解集不能包含重复的子集。\n\n示例:\n\n- 输入: [1,2,2]\n- 输出: [ [2], [1], [1,2,2], [2,2], [1,2], [] ]\n\n[491力扣题目链接](https://leetcode.cn/problems/increasing-subsequences/)\n\n给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。\n\n示例:\n\n- 输入: [4, 6, 7, 7]\n- 输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\n\n说明:\n\n- 给定数组的长度不会超过15。\n- 数组中的整数范围是 [-100,100]。\n- 给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。\n\n### 分析\n\n所有可能的子集表明需要收集所有符合条件的节点，不管是不是叶子节点，==这条要求可以通过ans.push_back()后不return实现==。\n\n二者输入数组可以有相同重复数字，输出的每一数组仅出现一次。这就要求回溯过程中**层间去重**。\n\n对于子集问题，可以先将数组排序然后再层间去重，详见[代码随想录](https://programmercarl.com/0090.%E5%AD%90%E9%9B%86II.html)。但是对于递增子序列，不能先排序，因为要求元素的先后顺序不能改变，这里可以利用一个used数组记录层间数字是否用过，达到层间去重的目的。\n\n### 层间去重代码\n\n**子集**\n\n![image-20221214111426009](https://qingfang-2022.oss-cn-hangzhou.aliyuncs.com/blog/202212141114108.png)\n\n**递增子序列**\n\n![image-20221214111224757](https://qingfang-2022.oss-cn-hangzhou.aliyuncs.com/blog/202212141112423.png)\n\n==注意，只要数据结构能记录元素是否用过，都可以用来替代used数组，这里用数组记录是因为题目中给了-100<=nums[i]<=100。==","tags":["算法","计算机","技术","C++","回溯"],"categories":["计算机","数据结构与算法"]},{"title":"Test","path":"/2022/11/29/test/","content":"## 这是第一段\n\n这是一张图片\n\n<img src=\"https://qingfang-2022.oss-cn-hangzhou.aliyuncs.com/blog/202212031536319.png\" alt=\"image-20221202002139490\" style=\"zoom: 33%;\" />\n\n## 这是第二段\n\n<img src=\"https://qingfang-2022.oss-cn-hangzhou.aliyuncs.com/blog/202212031536320.png\" alt=\"image-20221203151352484\" style=\"zoom: 50%;\" />"}]